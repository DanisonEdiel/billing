name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'tax-service/**'
      - 'discount-service/**'
      - 'invoice-service/**'
      - 'payment-service/**'
      - '.github/workflows/ci-pipeline.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'tax-service/**'
      - 'discount-service/**'
      - 'invoice-service/**'
      - 'payment-service/**'
      - '.github/workflows/ci-pipeline.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: billing
          RABBITMQ_DEFAULT_PASS: billing123
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        service: [tax-service, discount-service, invoice-service, payment-service]
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 black isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
        
    - name: Lint with flake8
      run: |
        cd ${{ matrix.service }}
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check formatting with black
      run: |
        cd ${{ matrix.service }}
        black --check .
        
    - name: Check imports with isort
      run: |
        cd ${{ matrix.service }}
        isort --check-only --profile black .
        
    - name: Run unit tests
      run: |
        cd ${{ matrix.service }}
        pytest tests/unit --cov=app --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        RABBITMQ_URL: amqp://billing:billing123@localhost:5672/
        JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
        JWT_ALGORITHM: RS256
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ matrix.service }}/coverage.xml
        flags: unittests
        name: ${{ matrix.service }}-codecov
        fail_ci_if_error: false

  integration-test:
    needs: test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: billing
          RABBITMQ_DEFAULT_PASS: billing123
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies for all services
      run: |
        for service in tax-service discount-service invoice-service payment-service; do
          cd $service
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .
          cd ..
        done
        
    - name: Run integration tests
      run: |
        for service in tax-service discount-service invoice-service payment-service; do
          cd $service
          python -m pytest tests/integration
          cd ..
        done
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        RABBITMQ_URL: amqp://billing:billing123@localhost:5672/
        JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
        JWT_ALGORITHM: RS256
        TAX_SERVICE_URL: http://localhost:8001
        DISCOUNT_SERVICE_URL: http://localhost:8002
        INVOICE_SERVICE_URL: http://localhost:8003
        PAYMENT_SERVICE_URL: http://localhost:8004

  build:
    needs: integration-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        service: [tax-service, discount-service, invoice-service, payment-service]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract branch name
      shell: bash
      run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/billing-${{ matrix.service }}:${{ env.BRANCH_NAME }}
          ${{ secrets.DOCKERHUB_USERNAME }}/billing-${{ matrix.service }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/billing-${{ matrix.service }}:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/billing-${{ matrix.service }}:buildcache,mode=max
