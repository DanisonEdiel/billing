name: Tax Service CD

on:
  workflow_run:
    workflows: ["Tax Service CI"]
    types:
      - completed
    branches:
      - develop
      - main

jobs:
  deploy-to-qa:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    environment: qa
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials with OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Init
      run: |
        cd terraform/qa
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=tax-service/terraform.tfstate" \
          -backend-config="region=${{ secrets.AWS_REGION }}" \
          -backend-config="role_arn=${{ secrets.AWS_ROLE_TO_ASSUME }}"
    
    - name: Terraform Plan
      run: |
        cd terraform/qa
        terraform plan \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="aws_role_arn=${{ secrets.AWS_ROLE_TO_ASSUME }}" \
          -var="db_username=${{ secrets.DB_USERNAME }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="service_name=tax-service" \
          -var="environment=qa" \
          -var="vpc_id=${{ secrets.VPC_ID }}" \
          -var="subnet_ids=${{ secrets.SUBNET_IDS }}" \
          -var="docker_image=${{ secrets.ECR_REPOSITORY_URL }}/billing-tax-service:${{ github.sha }}" \
          -out=tfplan
    
    - name: Terraform Apply
      run: |
        cd terraform/qa
        terraform apply -auto-approve tfplan
    
    - name: Update Tax Service in ECS
      run: |
        aws ecs update-service --cluster billing-qa --service tax-service --force-new-deployment

  create-pr-for-prod:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    needs: deploy-to-qa
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Create Pull Request to main
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: Deploy tax-service to production
        title: Deploy Tax Service to Production
        body: |
          This PR is automatically generated to deploy the latest QA-approved Tax Service to production.
          
          ## Changes included
          
          - Automated deployment from develop branch
          - Last commit: ${{ github.sha }}
          
          ## QA Validation
          
          - [x] Deployed to QA environment
          - [x] Passed all CI tests
          
          Please review and approve to deploy to production.
        branch: deploy-tax-service-to-prod
        base: main
        labels: automated-pr, deploy-to-prod, tax-service
        draft: false
        reviewers: ${{ secrets.PROD_REVIEWERS }}

  deploy-to-prod:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials with OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Init
      run: |
        cd terraform/prod
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=tax-service/terraform.tfstate" \
          -backend-config="region=${{ secrets.AWS_REGION }}" \
          -backend-config="role_arn=${{ secrets.AWS_ROLE_TO_ASSUME }}"
    
    - name: Terraform Plan
      run: |
        cd terraform/prod
        terraform plan \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="aws_role_arn=${{ secrets.AWS_ROLE_TO_ASSUME }}" \
          -var="db_username=${{ secrets.DB_USERNAME }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="service_name=tax-service" \
          -var="environment=prod" \
          -var="vpc_id=${{ secrets.VPC_ID }}" \
          -var="subnet_ids=${{ secrets.SUBNET_IDS }}" \
          -var="docker_image=${{ secrets.ECR_REPOSITORY_URL }}/billing-tax-service:${{ github.sha }}" \
          -out=tfplan
    
    - name: Terraform Apply
      run: |
        cd terraform/prod
        terraform apply -auto-approve tfplan
    
    - name: Update Tax Service in ECS
      run: |
        aws ecs update-service --cluster billing-prod --service tax-service --force-new-deployment
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: tax-service-v${{ github.run_number }}
        name: Tax Service Production Release v${{ github.run_number }}
        body: |
          Tax Service Production release v${{ github.run_number }}
          
          Deployed commit: ${{ github.sha }}
          Deployment date: ${{ steps.date.outputs.date }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
